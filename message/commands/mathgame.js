const { evaluate } = require('mathjs');

module.exports = {
    name: 'mathgame',
    description: '¬°Desaf√≠a tu mente con un juego matem√°tico!',
    aliases: ['juego', 'mathchallenge'],
    
    async execute(sock, m) {
        const difficultyLevels = ['f√°cil', 'normal', 'dif√≠cil', 'experto'];
        const difficulty = difficultyLevels.includes(m.body.toLowerCase()) ? m.body.toLowerCase() : 'normal';

        const num1 = generateRandomNumber(difficulty);
        const num2 = generateRandomNumber(difficulty);
        const operator = generateRandomOperator(difficulty);
        const expression = `${num1} ${operator} ${num2}`;

        let correctAnswer;
        try {
            correctAnswer = evaluate(expression);
        } catch (error) {
            console.error(error);
            await sock.sendMessage(m.chat, 'Hubo un error al generar la pregunta. Int√©ntalo de nuevo.', { quoted: m });
            return;
        }

        try {
            // Env√≠a la pregunta al usuario con un temporizador de 30 segundos
            await sock.sendMessage(m.chat, {
                text: `‚è≥ *Desaf√≠o Matem√°tico - Nivel ${difficulty.toUpperCase()}* ‚è≥\n\nResuelve la siguiente operaci√≥n en 30 segundos:\n*${expression}*`,
                contextInfo: { mentionedJid: [m.sender] }
            });

            // Espera la respuesta del usuario durante 30 segundos
            const userResponse = await sock.waitForMessage(m.from, { sender: m.sender, timeout: 30000 });

            // Verifica si el usuario respondi√≥ a tiempo
            if (userResponse) {
                const userAnswer = parseFloat(userResponse.body.trim());

                // Verifica la respuesta del usuario
                if (!isNaN(userAnswer) && userAnswer === correctAnswer) {
                    await sock.sendMessage(m.chat, `üéâ ¬°Correcto! La respuesta es ${correctAnswer}. ¬°Bien hecho!`, { quoted: m });
                } else {
                    await sock.sendMessage(m.chat, `‚ùå Incorrecto. La respuesta correcta era ${correctAnswer}. ¬°Int√©ntalo de nuevo!`, { quoted: m });
                }
            } else {
                // El usuario no respondi√≥ a tiempo
                await sock.sendMessage(m.chat, '‚åõ ¬°Se acab√≥ el tiempo! Int√©ntalo de nuevo.', { quoted: m });
            }
        } catch (error) {
            console.error(error);
            await sock.sendMessage(m.chat, 'Hubo un error al procesar el juego. Int√©ntalo nuevamente m√°s tarde.', { quoted: m });
        }
    }
};

function generateRandomNumber(difficulty) {
    const difficultyFactors = {
        f√°cil: 10,
        normal: 50,
        dif√≠cil: 100,
        experto: 500
    };

    return Math.floor(Math.random() * difficultyFactors[difficulty]) + 1;
}

function generateRandomOperator(difficulty) {
    const basicOperators = ['+', '-'];
    const advancedOperators = ['*', '/'];

    if (difficulty === 'experto') {
        return advancedOperators[Math.floor(Math.random() * advancedOperators.length)];
    }

    return basicOperators[Math.floor(Math.random() * basicOperators.length)];
}
